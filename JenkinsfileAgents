pipeline {
    agent none

    stages {
        stage ('Get code') {
            agent { label 'Agent1' } 
            steps {
                sh 'whoami'
                sh 'hostname'
                echo 'Pulling repo'
                git 'https://github.com/dev-alex-ops/anieto-unir'
                stash includes: 'app/**/*', name: 'app'
                stash includes: 'test/**/*', name: 'test'
                stash includes: 'pytest.ini', name: 'pytest'
            }
        }

        stage('No dependency tests') {
            parallel {
                stage ('Static') {
                    agent { label 'Agent1' }
                    steps {
                        sh 'whoami'
                        sh 'hostname'
                        sh '''
                            python3 -m flake8 --format=pylint --exit-zero app > flake8.out
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            recordIssues tools: [flake8(pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                        }
                    }
                }

                stage ('Security') {
                    agent { label 'Agent2' }
                    steps {
                        sh 'whoami'
                        sh 'hostname'
                        unstash 'app'
                        unstash 'test'
                        unstash 'pytest'
                        sh '''
                            python3 -m bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                        }
                    }
                }

                stage ('Unit tests') {
                    agent { label 'Agent1' }
                    steps {
                        sh 'whoami'
                        sh 'hostname'
                        unstash 'app'
                        unstash 'test'
                        unstash 'pytest'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                export PYTHONPATH=.
                                ls -la
                                python3 -m coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest --junitxml=junit-unit.xml test/unit
                                python3 -m coverage xml
                            '''
                            stash includes: 'coverage.xml', name: 'results'
                        }
                    }
                }
                
                stage ('Service Tests') {
                    agent { label 'Agent2' }
                    steps {
                        sh 'whoami'
                        sh 'hostname'
                        unstash 'app'
                        unstash 'test'
                        unstash 'pytest'
                        sh '''
                            [ -f test/wiremock/wiremock-standalone-3.6-0.jar ] || wget https://repo1.maven.org/maven2/org/wiremock/wiremock-standalone/3.6.0/wiremock-standalone-3.6.0.jar -P test/wiremock
                            export FLASK_APP=app/api.py
                            (python3 -m flask run &)
                            sleep 5
                            (java -jar test/wiremock/wiremock-standalone-3.6.0.jar --port 9090 --root-dir test/wiremock &)
                            sleep 5
                            '''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                export PYTHONPATH=.
                                python3 -m pytest --junitxml=junit-rest.xml test/rest
                            '''
                        }
                        stash includes: 'junit-rest.xml', name: 'rest'
                    }
                }

                stage('Performance') {
                    agent { label 'Agent2' }
                    steps {
                        sh 'whoami'
                        sh 'hostname'
                        sh '''
                            export FLASK_APP=app/api.py
                            (python3 -m flask run)&
                            sleep 3
                            export PATH=$PATH:${JMETERPATH}
                            jmeter -n -t test/jmeter/flask.jmx -f -l flask.jtl
                        '''
                        perfReport sourceDataFiles: 'flask.jtl'
                    }
                }
            }
        }

        stage('Cobertura - Junit') {
            agent { label 'Agent1' }
            steps {
                sh 'whoami'
                sh 'hostname'
                unstash 'rest'
                unstash 'results'
                catchError(buildResult: 'UNSTABLE', stageResult: 'Failure') {
                    cobertura coberturaReportFile: 'coverage.xml', onlyStable: false, failUnstable: false, conditionalCoverageTargets: '100,80,90', lineCoverageTargets: '100,85,95'
                }
                junit 'junit*.xml'
            }
        }
    }

    post {
        always {
            node ('Agent1') {
                cleanWs(cleanWhenNotBuilt: true,
                    cleanWhenAborted: true,
                    cleanWhenFailure: true,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '**/*', type: 'INCLUDE'],
                            [pattern: '.propsfile', type: 'EXCLUDE']])
            }
            node ('Agent2') {
                cleanWs(cleanWhenNotBuilt: true,
                    cleanWhenAborted: true,
                    cleanWhenFailure: true,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '**/*', type: 'INCLUDE'],
                            [pattern: '.propsfile', type: 'EXCLUDE']])
            }
        }
    }
}